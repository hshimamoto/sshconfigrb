#!/usr/bin/env ruby
# vim: set sw=2 sts=2:
#
# MIT License Copyright (C) 2017 Hiroshi Shimamoto
#
# This script generates .ssh/config file.
# The sources for hosts should be placed under .ssh/hosts directory.
# Also a RSA key should be placed under .ssh/keys directory.

class RemoteHostEntry
  attr_accessor :Name
  attr_accessor :User, :Hostname, :Port, :Identityfile
  attr_accessor :StrictHostKeyChecking
  attr_accessor :UserKnownHostsFile
  attr_accessor :ProxyCommand
  attr_accessor :ServerAliveInterval
  def initialize(path)
    @Name = File.basename(path)
    if File.directory?(path) then
      @hosts = []
      if File.exist?("#{path}/_top") then
	@hosts << RemoteHostEntry.new("#{path}/_top")
      end
      Dir.glob("#{path}/*") { |path2|
	next if path2 == "#{path}/_top"
	@hosts << RemoteHostEntry.new(path2)
      }
      return
    end
    open(path) { |f|
      puts "- #{@Name}"
      f.readlines.each { |line|
	# skip comment line
	next if line[0] == '#'
	line.chomp!
	kw = []
	if line =~ /([\S]+)\s+(.+)/ then
	  kw[0] = $1
	  kw[1] = $2
	end
	case kw[0].downcase
	when "group" then
	  # _top
	  @Name = kw[1]
	when "user" then
	  @User = kw[1]
	when "hostname" then
	  @Hostname = kw[1]
	when "port" then
	  @Port = kw[1]
	when "identityfile" then
	  @Identityfile = kw[1]
	when "stricthostkeychecking" then
	  @StrictHostKeyChecking = kw[1]
	when "userknownhostsfile" then
	  @UserKnownHostsFile = kw[1]
	when "proxycommand" then
	  @ProxyCommand = kw[1]
	when "serveraliveinterval" then
	  @ServerAliveInterval = kw[1]
	else
	  puts "unkown keyword #{kw[0]}"
	end
      }
    }
  end
  def compile__Identityfile
    # look for identityfile
    Dir.glob(".ssh/keys/*") { |path|
      name = File.basename(path)
      if name == @Identityfile then
	@config << "  Identityfile ~/#{path}"
	return # no more work
      end
    }
  end
  def compile
    @config = []
    if @hosts then
      @hosts.each { |host|
	@config << host.compile
      }
    else
      @config << "Host #{@Name}"
      ["User", "Hostname", "Port", "Identityfile",
	"StrictHostKeyChecking", "UserKnownHostsFile",
	"ProxyCommand", 'ServerAliveInterval'].each { |attr|
	if __send__ attr then
	  m = "compile__#{attr}"
	  if respond_to?(m) then
	    __send__ m
	  else
	    @config << "  #{attr} #{__send__ attr}"
	  end
	end
      }
    end
    @config
  end
end

class RemoteHosts
  attr_accessor :Hosts
  def initialize
    @Hosts = []
    puts "Load Remote Hosts"
    Dir.glob(".ssh/hosts/*") { |path|
      @Hosts << RemoteHostEntry.new(path)
    }
  end
  def compile
    config = []
    config << "# THIS FILE WAS GENERATED BY COMPILE SCRIPT"
    config << "# DO NOT MODIFY DIRECTLY"
    #
    @Hosts.each { |e|
      config << "" # intentionally break
      config += e.compile
    }
    config.join("\n")
  end
end

# main
def main
  # move to $HOST
  Dir.chdir

  rhosts = RemoteHosts.new
  open(".ssh/config", "w") { |f|
    f.puts rhosts.compile
    f.chmod(0600)
  }
end

main
